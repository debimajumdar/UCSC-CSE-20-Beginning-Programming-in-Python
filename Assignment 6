LAB 11.10.1
Implement the quadratic_formula() function. The function takes 3 arguments, a, b, and c, and computes the two results of the quadratic formula:
 x1 = (-b + math.sqrt(b**2 - 4*a*c)) / (2 * a)
 x2 = (-b - math.sqrt(b**2 - 4*a*c)) / (2 * a)
The quadratic_formula() function returns the tuple (x1, x2). Ex: When a = 1, b = -5, and c = 6, quadratic_formula() returns (3, 2).
Code provided in main.py reads a single input line containing values for a, b, and c, separated by spaces. Each input is converted 
to a float and passed to the quadratic_formula() function.

CODE:
import math
def quadratic_formula(a, b, c):
    x1 = (-b + math.sqrt(b**2 - 4*a*c)) / (2 * a)
    x2 = (-b - math.sqrt(b**2 - 4*a*c)) / (2 * a)
    return (x1, x2)
    

def print_number(number, prefix_str):
    if float(int(number)) == number:
        print(f'{prefix_str}{number:.0f}')
    else:
        print(f'{prefix_str}{number:.2f}')
    

if __name__ == "__main__":
    input_line = input()
    split_line = input_line.split(" ")
    a = float(split_line[0])
    b = float(split_line[1])
    c = float(split_line[2])
    solution = quadratic_formula(a, b, c)
    print(f'Solutions to {a:.0f}x^2 + {b:.0f}x + {c:.0f} = 0')
    print_number(solution[0], 'x1 = ')
    print_number(solution[1], 'x2 = ')
    
LAB 12.9.1
Write a program that first reads in the name of an input file and then reads the file using the csv.reader() method. 
The file contains a list of words separated by commas. Your program should output the words and their frequencies 
(the number of times each word appears in the file) without any duplicates.

CODE:
import csv
inputx = input()

with open(inputx, 'r') as wordsfile:
    words_reader = csv.reader(wordsfile)
    for row in words_reader:
        list_of_words = row

no_duplicates_in_list = list(dict.fromkeys(list_of_words))
listlength = len(no_duplicates_in_list)

for i in range(listlength):
    print(no_duplicates_in_list[i], list_of_words.count(no_duplicates_in_list[i]))
    
LAB 12.10.1 
Write a program that first reads in the name of an input file and then reads the input file using the file.readlines() method. 
The input file contains an unsorted list of number of seasons followed by the corresponding TV show. Your program should put the contents 
of the input file into a dictionary where the number of seasons are the keys, and a list of TV shows are the values 
(since multiple shows could have the same number of seasons).
Sort the dictionary by key (least to greatest) and output the results to a file named output_keys.txt. Separate multiple TV shows
associated with the same key with a semicolon (;), ordering by appearance in the input file. Next, sort the dictionary by values (alphabetical order),
and output the results to a file named output_titles.txt.

CODE:
def read_file(something):
    dict1 = {}
    with open(something, 'r') as infile:
        lines = infile.readlines()
        for index in range(0, len(lines) - 1, 2):
            if lines[index].strip() == '':
                continue
            count = int(lines[index].strip())
            show = lines[index + 1].strip()
            if count in dict1.keys():
                show_list = dict1.get(count)
                show_list.append(show)
            else:
                dict1[count] = [show]

    return dict1

def output_keys(dict1, filename):
    with open(filename, 'w+') as q:
         for key in sorted(dict1.keys()):
              q.write('{}: {}\n'.format(key, '; '.join(dict1.get(key))))

              print('{}: {}'.format(key, '; '.join(dict1.get(key))))
def output_titles(dict1, filename):
     titles = []
     for title in dict1.values():
         titles.extend(title)
         with open(filename, 'w+') as outfile:
             for title in sorted(titles):
                 outfile.write('{}\n'.format(title))
                 print(title)
def main(x):
    file_name = x
    dict1 = read_file(file_name)
    if dict1 is None:
        print('Error: Invalid file name provided: {}'.format(file_name))
        return
    output_filename_1 = 'output_keys.txt'
    output_filename_2 = 'output_titles.txt'
    output_keys(dict1, output_filename_1)
    output_titles(dict1, output_filename_2)

user_input = input()
main(user_input)

