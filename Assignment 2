LAB 3.13.1 
Given an integer representing a 10-digit phone number, output the area code, prefix, and line number using the format (800) 555-1212.
Ex: If the input is:
8005551212
the output is:
(800) 555-1212
Hint: Use % to get the desired rightmost digits. Ex: The rightmost 2 digits of 572 is gotten by 572 % 100, which is 72.
Hint: Use // to shift right by the desired amount. Ex: Shifting 572 right by 2 digits is done by 572 // 100, which yields 5. 
(Recall integer division discards the fraction).
For simplicity, assume any part starts with a non-zero digit. So 0119998888 is not allowed.

CODE:

phone_number = int(input())
line_number = phone_number % 10000
area_code_prefix = phone_number // 10000
area_code = area_code_prefix // 1000
prefix = area_code_prefix % 1000
print('(',area_code,')',' ',prefix,'-',line_number, sep='')

LAB 3.14.1 
A half-life is the amount of time it takes for a substance or entity to fall to half its original value. 
Caffeine has a half-life of about 6 hours in humans. Given caffeine amount (in mg) as input, output the caffeine level after 6, 12, and 24 hours. 
Use a string formatting expression with conversion specifiers to output the caffeine amount as floating-point numbers.

CODE:

caffeine_mg = float(input())
mg1 = (caffeine_mg) / 2
mg2 = (caffeine_mg) / 4
mg3 = (caffeine_mg) / 16
print('After 6 hours: {:.2f} mg'.format(mg1))
print('After 12 hours: {:.2f} mg'.format(mg2))
print('After 24 hours: {:.2f} mg'.format(mg3))

LAB 3.17.1
(1)Prompt the user to enter two words and a number, storing each into separate variables. Then, output those three values on a single 
line separated by a space. (Submit for 1 point)
(2)Output two passwords using a combination of the user input. Format the passwords as shown below. (Submit for 2 points, so 3 points total).
(3)Output the length of each password (the number of characters in the strings). (Submit for 2 points, so 5 points total).

CODE:

color = input()
flower = input()
number = input()
print('You entered: {} {} {}\n' .format(color,flower,number))
password1 = color+'_'+flower
password2 = number+color+number
print('First password:', password1)
print('Second password:', password2+'\n')
print('Number of characters in', password1+':',len(password1))
print('Number of characters in', password2+':',len(password2))

LAB 4.15.1 
Write a program whose inputs are three integers, and whose output is the smallest of the three values.

CODE:
a = int(input())
b = int(input())
c = int(input())
smallest = 0
if a < b and a < c :
    smallest = a
if b < a and b < c :
    smallest = b
if c < a and c < b :
     smallest = c
if a == b and a == c :
    smallest = a
print(smallest)

LAB 4.17.1
Write a program that takes a date as input and outputs the date's season in the northern hemisphere. 
The input is a string to represent the month and an int to represent the day.
In addition, check if the string and int are valid (an actual month and day).
The dates for each season in the northern hemisphere are:
Spring: March 20 - June 20
Summer: June 21 - September 21
Autumn: September 22 - December 20
Winter: December 21 - March 19

CODE:
input_month = input()
input_day = int(input())
months= ('January', 'February','March', 'April' , 'May' , 'June' , 'July' , 
'August' , 'September' , "October" , "November" , "December")

if not(input_month in months):
    print("Invalid")

elif input_month == 'March':
    if not(1<=input_day<=31):
        print ("Invalid")
    elif input_day<=19:
        print("Winter")
    else:
        print ("Spring")
elif input_month == 'April' :
    if not(1<=input_day<=30):
        print("Invalid")
    else:
        print("Spring")
elif input_month == 'May':
    if not(1<=input_day<=31):
        print("Invalid")
    else:
        print("Spring")
elif input_month == 'June':
    if not(1<=input_day<=30):
        print("Invalid")
    elif input_day<=20:
        print ("Spring")
    else:
        print("Summer")
elif input_month == 'July' or input_month == 'August':
    if not(1<=input_day<=31):
        print("Invalid")
    else: 
        print("Summer")
elif input_month == 'September':
    if not(1<=input_day<=30):
        print("Invalid")
    elif input_day<=21:
        print ("Summer")
    else:
        print ("Autumn")
elif input_month == "October":
    if not(1<=input_day<=31):
        print("Invalid")
    else:
        print("Autumn")
elif input_month == "November":
    if not(1<=input_day<=30):
        print("Invalid")
    else:
        print ("Autumn")
elif input_month == "December":
    if not(1<=input_day<=31):
        print("Invalid")
    elif input_day <=20:
        print ("Autumn")
    else:
        print ("Winter")
elif input_month == 'January':
    if not(1<=input_day<=31):
        print("Invalid")
    else:
        print("Winter")
elif input_month == "February":
    if not(1<=input_day<=29):
        print("Invalid")
    else:
        print ("Winter")
        
        
 LAB 4.18.1
 Write a program with total change amount as an integer input, and output the change using the fewest coins, one coin type per line. 
 The coin types are Dollars, Quarters, Dimes, Nickels, and Pennies.
 Use singular and plural coin names as appropriate, like 1 Penny vs. 2 Pennies.
 
 CODE:
 #define exact change function
def exact_change(user_total):
    num_Dollars = user_total // 100 #convert to dollars
    user_total %= 100 #get remainder after conversion
    num_Quarters = user_total // 25 #convert to quarters
    user_total %= 25 #get remainder after conversion
    num_Dimes = user_total // 10 #convert to dimes
    user_total %= 10 #get remainder after conversion
    num_Nickels = user_total // 5 #convert to nickels
    user_total %= 5 #get remainder after conversion
    num_Pennies = user_total
    return(num_Dollars, num_Quarters, num_Dimes, num_Nickels, num_Pennies)
if __name__ == '__main__':
    input_val = int(input()) #prompt user to input an integer
    num_Dollars, num_Quarters, num_Dimes, num_Nickels, num_Pennies = exact_change(input_val) #recall exact_change function
    
    #define output statements to output number of exact_change variables: 
    #num_dollars, num_quarters, num_dimes, num_nickels, num_pennies  
    if input_val <=0: #if amount is zero
        print('No change') #print output
        
    else:
        if num_Dollars > 1: #if number of dollars is greater than one
            print('%d Dollars' % num_Dollars) #print number of dollars
        elif num_Dollars == 1: # if number of dollars equal 1
            print('%d Dollar' % num_Dollars) #print dollar in singular
        
        if num_Quarters > 1: #if number of quarters is greater than one
            print('%d Quarters' % num_Quarters) #print number of quarters
        elif num_Quarters ==1: # if number of quarters equal 1
            print('%d Quarter' % num_Quarters) #print quarter in singular
        
        if num_Dimes > 1: #if number of dimes is greater than one
            print('%d Dimes' % num_Dimes) #print number of dimes
        elif num_Dimes == 1: # if number of dimes equal 1
            print('%d Dime' % num_Dimes) #print dime in singular
            
        if num_Nickels > 1: #if number of nickels is greater than one
            print('%d Nickels' % num_Nickels) #print number of nickels
        elif num_Nickels == 1: # if number of nickels equal 1
            print('%d Nickel' % num_Nickels) #print nickel in singular
        
        if num_Pennies >1: #if number pennies is greater than one
            print('%d Pennies' % num_Pennies) #print number of pennies
        elif num_Pennies ==1: # if number of pennies equal 1
            print('%d Penny' % num_Pennies) #print penny in singular
