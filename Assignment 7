LAB 9.13.1
Complete the Car class by creating an attribute purchase_price (type int) and the method print_info() that outputs the car's information.

CODE:
class Car:
    def __init__(self):
        self.model_year = 0
        # TODO: Declare purchase_price attribute
      
        self.current_value = 0

    def calc_current_value(self, current_year):
        depreciation_rate = 0.15
        # Car depreciation formula
        car_age = current_year - self.model_year
        self.current_value = round(self.purchase_price * (1 - depreciation_rate) ** car_age)
    
    def print_info(self):

      print("Car's information:")

      print("  Model year:", self.model_year)

      print(str("  Purchase price:"),str('$')+str(self.purchase_price))

      print(str("  Current value:"),str('$')+str(self.current_value))

if __name__ == "__main__":    
    year = int(input())
    price = int(input())
    current_year = int(input())
   
    my_car = Car()
    my_car.model_year = year
    my_car.purchase_price = price
    my_car.calc_current_value(current_year)
    my_car.print_info()



if __name__ == "__main__":    
    year = int(input()) 
    price = int(input())
    current_year = int(input())
    
    my_car = Car()
    my_car.model_year = year
    my_car.purchase_price = price
    my_car.calc_current_value(current_year)
    my_car.print_info()
    
LAB 9.14.1
Complete the FoodItem class by adding a constructor to initialize a food item. The constructor should initialize the name (a string) to "Water" 
and all other instance attributes to 0.0 by default. If the constructor is called with a food name, grams of fat, grams of carbohydrates, and 
grams of protein, the constructor should assign each instance attribute with the appropriate parameter value.
The given program accepts as input a food item name, amount of fat, carbs, and protein, and the number of servings. The program creates a food 
item using the constructor parameters' default values and a food item using the input values. The program outputs the nutritional information and 
calories per serving for a food item.

CODE:
class FoodItem:
    def __init__(self, name = 'Water', fat= 0.0, carbs = 0.0, protein = 0.0):
        self.name = name
        self.fat = fat
        self.carbs = carbs
        self.protein = protein
        
    def get_calories(self, num_servings):
        # Calorie formula
        calories = ((self.fat * 9) + (self.carbs * 4) + (self.protein * 4)) * num_servings;
        return calories
       
    def print_info(self):
        print(f'Nutritional information per serving of {self.name}:')
        print(f'  Fat: {self.fat:.2f} g')
        print(f'  Carbohydrates: {self.carbs:.2f} g')
        print(f'  Protein: {self.protein:.2f} g')

if __name__ == "__main__":
       
    item_name = input()
    if item_name == 'Water' or item_name == 'water':
        food_item = FoodItem()
        food_item.print_info()
        print(f'Number of calories for {1.0:.2f} serving(s): {food_item.get_calories(1.0):.2f}')                       
    
    else:
        amount_fat = float(input())
        amount_carbs = float(input())
        amount_protein = float(input())
        num_servings = float(input())
        
        food_item = FoodItem(item_name, amount_fat, amount_carbs, amount_protein)
        food_item.print_info()
        print(f'Number of calories for {1.0:.2f} serving(s): {food_item.get_calories(1.0):.2f}')
        print(f'Number of calories for {num_servings:.2f} serving(s): {food_item.get_calories(num_servings):.2f}')
        
LAB 9.16.1
Given class Triangle, complete the program to read and set the base and height of triangle1 and triangle2, determine which triangle's area 
is smaller, and output the smaller triangle's info, making use of Triangle's relevant methods.

CODE:
class Triangle:   
    def __init__(self):
        self.base = 0
        self.height = 0

    def set_base(self, user_base):
        self.base = user_base

    def set_height(self, user_height):
        self.height = user_height
   
    def get_area(self):
        area = 0.5 * self.base * self.height
        return area
   
    def print_info(self):
        print(f'Base: {self.base:.2f}')
        print(f'Height: {self.height:.2f}')
        print(f'Area: {self.get_area():.2f}')

if __name__ == "__main__":
    triangle1 = Triangle()
    triangle2 = Triangle()

    triangle1.set_base(float(input()))
    triangle1.set_height(float(input()))
    print('Triangle with smaller area:')  
    triangle2.set_base(float(input()))
    triangle2.set_height(float(input()))
    
    if triangle1.get_area()>triangle2.get_area():
        triangle2.print_info()
    else:
        triangle1.print_info()

LAB 9.17.1
Complete the Team class implementation. For the instance method get_win_percentage(), the formula is:
wins / (wins + losses). Note: Use floating-point division.
For instance method print_standing(), output the win percentage of the team with two digits after the decimal point and whether 
the team has a winning or losing average. A team has a winning average if the win percentage is 0.5 or greater.

CODE:
class Team:
    def __init__(self):
        self.name = 'none'
        self.wins = 0
        self.losses = 0

    def get_win_percentage(self):
        x = 0
        x = self.wins / (self.wins + self.losses)
        return x
    def print_standing(self):
        x = self.get_win_percentage()
        print(f'Win percentage: {x:.2f}')
        if x >= 0.5:
            print(f'Congratulations, Team {self.name} has a winning average!')
        else:
            print(f'Team {self.name} has a losing average.')
            



if __name__ == "__main__":
    team = Team()
   
    user_name = input()
    user_wins = int(input())
    user_losses = int(input())
    
    team.name = user_name
    team.wins = user_wins
    team.losses = user_losses
    
    team.print_standing()
    
LAB 11.8.1
Define the Artist class in Artist.py with a constructor to initialize an artist's information. The constructor should by default 
initialize the artist's name to "unknown" and the years of birth and death to -1.
Define the Artwork class in Artwork.py with a constructor to initialize an artwork's information. The constructor should by default
initialize the title to "unknown", the year created to -1, and the artist to use the Artist default constructor parameter values.
Add an import statement to import the Artist class.
Add import statements to main.py to import the Artist and Artwork classes.

CODE:

Current file main.py

# TODO: Import Artist from Artist.py and Artwork from Artwork.py
from Artist import Artist
from Artwork import Artwork

if __name__ == "__main__":
    user_artist_name = input()
    user_birth_year = int(input())
    user_death_year = int(input())
    user_title = input()
    user_year_created = int(input())

    user_artist = Artist(user_artist_name, user_birth_year, user_death_year)

    new_artwork = Artwork(user_title, user_year_created, user_artist)
  
    new_artwork.print_info()
    
Current file Artist.py

class Artist:
    def __init__(self, name = 'unknown', birth_year = -1, death_year = -1):
        self.name = name
        self.birth_year = birth_year
        self.death_year = death_year
        
    def print_info(self):
        if self.birth_year >= 0 and self.death_year >= 0:
            print(f'Artist: {self.name} ({self.birth_year} to {self.death_year})')
        elif self.birth_year >= 0: 
            print(f'Artist: {self.name} ({self.birth_year} - present)')
        else:
            print(f'Artist: {self.name} (unknown)')
 
Current file Artwork.py
# TODO: Import Artist from Artist.py
from Artist import Artist
class Artwork:
    def __init__(self,title = 'unknown', year_created = -1, artist = Artist()):
        self.title = title
        self.year_created = year_created
        self.artist = artist

    def print_info(self):
        self.artist.print_info()
        print(f'Title: {self.title}, {self.year_created}')
